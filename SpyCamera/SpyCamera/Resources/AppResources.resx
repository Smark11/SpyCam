<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <data name="ResourceFlowDirection" xml:space="preserve">
    <value>LeftToRight</value>
    <comment>Controls the FlowDirection for all elements in the RootFrame. Set to the traditional direction of this resource file's language</comment>
  </data>
  <data name="ResourceLanguage" xml:space="preserve">
    <value>en-US</value>
    <comment>Controls the Language and ensures that the font for all elements in the RootFrame aligns with the app's language. Set to the language code of this resource file's language.</comment>
  </data>
  <data name="ApplicationTitle" xml:space="preserve">
    <value>Spy Camera</value>
  </data>
  <data name="AppBarButtonText" xml:space="preserve">
    <value>add</value>
  </data>
  <data name="AppBarMenuItemText" xml:space="preserve">
    <value>Menu Item</value>
  </data>
  <data name="Step1" xml:space="preserve">
    <value>Step 1:  If you haven't taken any screen shots on your phone, you will need to take a screen shot to use as the spy camera shutter button.  To take a screen shot, press the home button and the power button at the same time.  You can take a screen shot from any screen of any application on your phone.</value>
  </data>
  <data name="Step2" xml:space="preserve">
    <value>Step 2:  Go to the configuration screen.  Choose the screenshot that you wish to use as the background for the button to take pictures.  You can also configure other camera settings on this screen.</value>
  </data>
  <data name="Step3" xml:space="preserve">
    <value>Step 3:  Go to the main screen.  You should now see your screenshot.  To take a picture, simply tap the screen. This typically takes about 1.5 seconds depending on focus settings, as well as which phone you own.</value>
  </data>
  <data name="Step4" xml:space="preserve">
    <value>Step 4:To view your picture, tap and slide to the left or right on the main screen.  Your picture will also be stored in your media library.</value>
  </data>
  <data name="About" xml:space="preserve">
    <value>About</value>
  </data>
  <data name="BackCamera" xml:space="preserve">
    <value>Back Camera</value>
  </data>
  <data name="BuyNow" xml:space="preserve">
    <value>Buy Now!</value>
  </data>
  <data name="Configuration" xml:space="preserve">
    <value>Configuration</value>
  </data>
  <data name="ExtendTrial" xml:space="preserve">
    <value>To Extend your trial from 3 days to 10 Days, Rate this app 5 stars, and leave a positive comment.</value>
  </data>
  <data name="FlashOff" xml:space="preserve">
    <value>Flash Off</value>
  </data>
  <data name="FlashOn" xml:space="preserve">
    <value>Flash On</value>
  </data>
  <data name="FocusOff" xml:space="preserve">
    <value>Focus Off</value>
  </data>
  <data name="FocusOn" xml:space="preserve">
    <value>Focus On</value>
  </data>
  <data name="FrontCamera" xml:space="preserve">
    <value>Front Camera</value>
  </data>
  <data name="ImagePreview" xml:space="preserve">
    <value>Image Preview:</value>
  </data>
  <data name="Instructions" xml:space="preserve">
    <value>Instructions</value>
  </data>
  <data name="MainScreen" xml:space="preserve">
    <value>Main Screen</value>
  </data>
  <data name="NoScreenShotSelected" xml:space="preserve">
    <value>No Screen Shot Selected</value>
  </data>
  <data name="NotNow" xml:space="preserve">
    <value>Not Now</value>
  </data>
  <data name="PictureCounterOff" xml:space="preserve">
    <value>Picture Counter Off</value>
  </data>
  <data name="PictureCounterOn" xml:space="preserve">
    <value>Picture Counter On</value>
  </data>
  <data name="PurchaseButton" xml:space="preserve">
    <value>Purchase</value>
  </data>
  <data name="RateButton" xml:space="preserve">
    <value>Rate</value>
  </data>
  <data name="SoundOff" xml:space="preserve">
    <value>Sound Off</value>
  </data>
  <data name="SoundOn" xml:space="preserve">
    <value>Sound On</value>
  </data>
  <data name="TrialExpired" xml:space="preserve">
    <value>Trial Has Expired.</value>
  </data>
  <data name="Test" xml:space="preserve">
    <value>test</value>
  </data>
  <data name="TakingPictureText" xml:space="preserve">
    <value>Taking Picture</value>
  </data>
</root>